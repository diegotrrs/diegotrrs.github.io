<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    
    
    
    <link>/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code easy to remove</title>
      <link>/posts/code-easy-to-remove/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/code-easy-to-remove/</guid>
      <description>
        
          
          
          
        
        
        
          Some time ago I ran into a tweet — one I haven&amp;rsquo;t been able to find since — of someone saying that one of the best lessons they&amp;rsquo;d learned through the years is to design code that is easy to remove. Initially, that didn&amp;rsquo;t sound natural to me — taking into account the death of our code in our programming process — but now I think that&amp;rsquo;s something we always want to do.
          
        
        </description>
    </item>
    
    <item>
      <title>How to get a Docker container&#39;s IP address</title>
      <link>/posts/how-to-get-a-docker-container-ip-address/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-get-a-docker-container-ip-address/</guid>
      <description>
        
          
          
          
        
        
        
          Containers are designed to be isolated but sometimes they need to communicate with other containers. This can be necessary when you have a container as your database server and you have a management tool, e.g.L: PGAdmin, running in another container in order to query and manage the database. In order to achieve this you need the container&amp;rsquo;s IP in the network bridge created by Docker. Follow either one of these two methods to achieve this:
          
        
        </description>
    </item>
    
    <item>
      <title>10 Tips for troubleshooting</title>
      <link>/posts/tips-troubleshooting/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/tips-troubleshooting/</guid>
      <description>
        
          
          
          
        
        
        
          Troubleshooting is one of those things you will do a lot as a programmer. Spending hours finding out the root cause of an issue may sound tedious — and it is — but that boost of dopamine you get when you find what&amp;rsquo;s causing a specific problem makes the whole thing worthwhile. The following tips are taken from more than 10 years of troubleshooting:
1. Check the logs This is number one for a reason.
          
        
        </description>
    </item>
    
    <item>
      <title>When to repeat yourself</title>
      <link>/posts/when-to-repeat-yourself/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/when-to-repeat-yourself/</guid>
      <description>
        
          
          
          
        
        
        
          Good practices are methods or techniques that have been generally accepted as the best option to use in a certain field or industry. They also faciliate communication between peers - if you bring a common practice in a conversation with your colleague they probably will know what you are talking about. In programming the Don&amp;rsquo;t Repeat Yourself (DRY) is one of most known and common practices.
1. The Don&amp;rsquo;t Repeat Yourself (DRY) principle The main idea behind the DRY principle is to avoid duplication of knowledge in order to reduce the risk of defects appearing when new code is introduced in the future.
          
        
        </description>
    </item>
    
  </channel>
</rss>