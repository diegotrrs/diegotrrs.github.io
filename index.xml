<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    
    
    
    <link>/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>It&#39;s all about perspective</title>
      <link>/posts/its-about-perspective/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/its-about-perspective/</guid>
      <description>
        
          
          
          
        
        
        
          Good practices, such as keeping things simple and small, and keeping things familiar together can be seen from different perspectives:
 From a function point of view, it might mean short functions that do one thing &amp;amp; with a few parameters. From a component point of view, it might mean a cohesive folder structure &amp;amp; good dependencies. From an architecture point of view, it might mean micro-services with their own database or a modular monolith.
          
        
        </description>
    </item>
    
    <item>
      <title>Code easy to remove</title>
      <link>/posts/code-easy-to-remove/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/code-easy-to-remove/</guid>
      <description>
        
          
          
          
        
        
        
          Some time ago I ran into a tweet — one I haven&amp;rsquo;t been able to find since — of someone saying that one of the best lessons they&amp;rsquo;d learned through the years is to design code that is easy to remove. Initially, that didn&amp;rsquo;t sound natural to me — taking into account the death of our code in our programming process — but now I think that&amp;rsquo;s something we always want to do.
          
        
        </description>
    </item>
    
    <item>
      <title>How to get a Docker container&#39;s IP address</title>
      <link>/posts/how-to-get-a-docker-container-ip-address/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-to-get-a-docker-container-ip-address/</guid>
      <description>
        
          
          
          
        
        
        
          Containers are designed to be isolated but sometimes they need to communicate with other containers. This can be necessary when you have a container as your database server and you have a management tool, e.g.L: PGAdmin, running in another container in order to query and manage the database. In order to achieve this you need the container&amp;rsquo;s IP in the network bridge created by Docker. Follow either one of these two methods to achieve this:
          
        
        </description>
    </item>
    
    <item>
      <title>10 Tips for troubleshooting</title>
      <link>/posts/tips-troubleshooting/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/tips-troubleshooting/</guid>
      <description>
        
          
          
          
        
        
        
          Troubleshooting is one of those things you will do a lot as a programmer. Spending hours finding out the root cause of an issue may sound tedious — and it is — but that boost of dopamine you get when you find what&amp;rsquo;s causing a specific problem makes the whole thing worthwhile. The following tips are taken from more than 10 years of troubleshooting:
1. Check the logs This is number one for a reason.
          
        
        </description>
    </item>
    
    <item>
      <title>When to repeat yourself</title>
      <link>/posts/when-to-repeat-yourself/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/when-to-repeat-yourself/</guid>
      <description>
        
          
          
          
        
        
        
          Good practices are methods or techniques that have been generally accepted as the best option to use in a certain field or industry. They also faciliate communication between peers - if you bring a common practice in a conversation with your colleague they probably will know what you are talking about. In programming the Don&amp;rsquo;t Repeat Yourself (DRY) is one of most known and common practices.
1. The Don&amp;rsquo;t Repeat Yourself (DRY) principle The main idea behind the DRY principle is to avoid duplication of knowledge in order to reduce the risk of defects appearing when new code is introduced in the future.
          
        
        </description>
    </item>
    
    <item>
      <title>Repition</title>
      <link>/examples/better-code-with-better-english/</link>
      <pubDate>Sun, 25 Apr 2021 02:13:50 +0000</pubDate>
      
      <guid>/examples/better-code-with-better-english/</guid>
      <description>
        
          
          
          
        
        
        
          1. Conjugate Expect versus Expects. 2. Know the difference between a noun and a verb, and adjective, preposition. preposition in functions names.
3. Use the &amp;lsquo;.&amp;rsquo;, write short sentences. 4. Know the PP of each verb. for example: isDisableD versus isDisable 5. Pluralization. Pluralization In English when you have two plural nouns text to one another the first one stays in singular (it&amp;rsquo;s called Noun Adjuncts)
6. Order noun and adjective redhouse housered
          
        
        </description>
    </item>
    
    <item>
      <title>When to repeat yourself</title>
      <link>/examples/when-to-repeat-yourself/</link>
      <pubDate>Sun, 25 Apr 2021 02:13:50 +0000</pubDate>
      
      <guid>/examples/when-to-repeat-yourself/</guid>
      <description>
        
          
          
          
        
        
        
          Good practices are methods or techniques that have been generally accepted as the best to use in a certain field or industry. They also make communication easier because if you bring a common good practice in a conversation your colleague probably will know what you mean right away. In programming the Don&amp;rsquo;t Repeat Yourself (DRY) is one of most known and unquestionable practices.
1. Don&amp;rsquo;t Repeat Yourself The main idea behind the Don&amp;rsquo;t Repeat Yourself principle or DRY is to avoid duplication of knowledge in order to reduce the risk of defects appearing when new code is introduced in the future.
          
        
        </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/contact/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description>
        
          
          
          
        
        
        
          How to contact me.
          
        
        </description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/examples/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 02:13:50 +0000</pubDate>
      
      <guid>/examples/creating-a-new-theme/</guid>
      <description>
        
          
          
          
        
        
        
          Description of my awesome project.
          
        
        </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/examples/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 02:13:50 +0000</pubDate>
      
      <guid>/examples/goisforlovers/</guid>
      <description>
        
          
          
          
        
        
        
          (Hu)go Template Primer description.
          
        
        </description>
    </item>
    
    <item>
      <title>Migrating from Jekyll</title>
      <link>/examples/migrate-from-jekyll/</link>
      <pubDate>Wed, 02 Apr 2014 02:13:50 +0000</pubDate>
      
      <guid>/examples/migrate-from-jekyll/</guid>
      <description>
        
          
          
          
        
        
        
          Migrating from Jekyll description.
          
        
        </description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/examples/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/examples/hugoisforlovers/</guid>
      <description>
        
          
          
          
        
        
        
          Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:
          
        
        </description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>
        
          
          
          
        
        
        
          Things about me.
          
        
        </description>
    </item>
    
  </channel>
</rss>